<?php

/**
 * @file
 * Install, update and uninstall functions for the Workbench Access module.
 */

use Drupal\workbench_access\WorkbenchAccessManagerInterface;

/**
 * Implements hook_install().
 *
 * Installs the default on users.
 *
 * @TODO: Can we do this via schema?
 */
function workbench_access_install() {
  // Assign domain access to bundles.
  $list['user'] = 'user';
  foreach ($list as $bundle => $entity_type) {
    workbench_access_confirm_fields($entity_type, $bundle);
  }
}

/**
 * Implements hook_uninstall().
 *
 * Removes access control fields on uninstall.
 */
function workbench_access_uninstall() {
  foreach (['user'] as $type) {
    $id = $type . '.' . WorkbenchAccessManagerInterface::FIELD_NAME;
    if ($field = \Drupal::entityTypeManager()->getStorage('field_storage_config')->load($id)) {
      $field->delete();
    }
  }
}

/**
 * Add the setting to deny access to unassigned content.
 */
function workbench_access_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('workbench_access.settings');
  $config->set('deny_on_empty', 0);
  $config->save(TRUE);
}

/**
 * Update to new access-scheme config entity.
 */
function workbench_access_update_8002() {
  // Stash this for later.
  \Drupal::state()->set('workbench_access_original_configuration', \Drupal::config('workbench_access.settings'));
  // Alter it to the new format.
  $config = \Drupal::configFactory()->getEditable('workbench_access.settings');
  foreach (['scheme', 'label', 'plural_label', 'fields', 'parents'] as $delete) {
    $config->clear($delete);
  }
  $config->save(TRUE);
}

/**
 * Create the new entity type.
 */
function workbench_access_update_8003() {
  // Install our config entity.
  $entity_manager = \Drupal::entityTypeManager();
  $update_manager = \Drupal::entityDefinitionUpdateManager();

  // Install 'access_scheme' config entity.
  $entity_manager->clearCachedDefinitions();
  $type = $entity_manager->getDefinition('access_scheme');
  $update_manager->installEntityType($type);
}
