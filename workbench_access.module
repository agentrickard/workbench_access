<?php

/**
 * @file
 * Contains workbench_access.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\workbench_access\AccessControlHierarchyBase;
use Drupal\workbench_access\AccessControlHierarchyInterface;
use Drupal\workbench_access\Entity\AccessSchemeInterface;
use Drupal\workbench_access\FormAlterHelper;
use Drupal\workbench_access\WorkbenchAccessManagerInterface;

/**
 * Defines the name of the node access control field.
 *
 * @deprecated to be removed before 8.x.1.0 - use
 *   \Drupal\workbench_access\WorkbenchAccessManagerInterface::FIELD_NAME
 *   instead.
 */
define('WORKBENCH_ACCESS_FIELD', 'field_workbench_access');

/**
 * Implements hook_help().
 */
function workbench_access_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the workbench_access module.
    case 'help.page.workbench_access':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Hierarchical access control module.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 *
 * Restricts selection options for the node form.
 */
function workbench_access_form_alter(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof EntityForm) {
    return;
  }
  $entity = $form_object->getEntity();
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }
  \Drupal::classResolver()->getInstanceFromDefinition(FormAlterHelper::class)->alterForm($form, $form, $entity);
}

/**
 * Creates our fields for an entity bundle.
 *
 * @param string $entity_type
 *   The entity type being created. Users are supported.
 * @param string $bundle
 *   The bundle being created.
 */
function workbench_access_confirm_fields($entity_type, $bundle) {
  // We have reports that importing config causes this function to fail.
  try {
    $text = [
      'user' => [
        'type' => 'user',
    // @TODO tie to config
        'label' => 'Sections',
        'description' => 'Assign the editorial sections that this user belongs to.',
      ],
      'node' => [
        'type' => $bundle,
      // @TODO tie to config
        'label' => 'Sections',
        'description' => 'The editorial section for this content.',
      ],
    ];
    $id = $entity_type . '.' . $bundle . '.' . WorkbenchAccessManagerInterface::FIELD_NAME;

    if (!$field = \Drupal::entityTypeManager()->getStorage('field_config')->load($id)) {
      $field = [
        'field_name' => WorkbenchAccessManagerInterface::FIELD_NAME,
        'entity_type' => $entity_type,
        'label' => $text[$entity_type]['label'],
        'bundle' => $bundle,
        'required' => FALSE,
        'description' => $text[$entity_type]['description'],
      ];
      if ($entity_type == 'node') {
        $field['settings']['handler_settings']['target_bundles'] = ['workbench_access' => 'workbench_access'];
        $field['settings']['handler_settings']['auto_create'] = FALSE;
        $field['settings']['handler_settings']['sort'] = ['field' => '_none'];
      }
      $field_config = \Drupal::entityTypeManager()->getStorage('field_config')->create($field);
      $field_config->save();
    }
    // Installing without setting form display leaves the field hidden, which is
    // what we want right now. @TODO: UI for user form.
  }
  catch (Exception $e) {
    \Drupal::logger('workbench_access')->notice('Field installation failed.');
  }
}

/**
 * Implements hook_entity_access().
 */
function workbench_access_entity_access(EntityInterface $entity, $op, AccountInterface $account) {
  // Return net result of all enabled access schemes. If one scheme allows
  // access, then it is granted.
  $manager = \Drupal::service('plugin.manager.workbench_access.scheme');
  return array_reduce(\Drupal::entityTypeManager()->getStorage('access_scheme')->loadMultiple(), function (AccessResult $carry, AccessSchemeInterface $scheme) use ($entity, $op, $account) {
    $carry->addCacheableDependency($scheme)->cachePerPermissions()->addCacheableDependency($entity);
    return $carry->orIf($scheme->getAccessScheme()->checkEntityAccess($scheme, $entity, $op, $account));
  }, AccessResult::neutral());
}

/**
 * Implements hook_node_create_access().
 *
 * @link https://www.drupal.org/node/2348203
 */
function workbench_access_entity_create_access(AccountInterface $account, $context, $entity_bundle) {
  // @todo move this to the access schemes.
  $return = AccessResult::neutral();
  // User can bypass.
  if ($account->hasPermission('bypass workbench access')) {
    return $return->cachePerPermissions();
  }

  // Check that access control applies to this entity type.
  $entity_type_id = $context['entity_type_id'];
  $schemes = array_filter(\Drupal::entityTypeManager()->getStorage('access_scheme')->loadMultiple(), function (AccessSchemeInterface $scheme) use ($entity_type_id, $entity_bundle, $return) {
    $return->addCacheableDependency($scheme);
    return $scheme->getAccessScheme()->applies($entity_type_id, $entity_bundle);
  });
  if (!$schemes) {
    return $return->addCacheTags(['access_scheme_list']);
  }

  // Check that the user is able to assign content to a section.
  $user_section_storage = \Drupal::service('workbench_access.user_section_storage');
  $forbidden = AccessResult::forbidden();
  $invalid_schemes = array_reduce($schemes, function ($carry, AccessSchemeInterface $scheme) use ($user_section_storage, $account, $forbidden) {
    $sections = $user_section_storage->getUserSections($scheme, $account->id());
    if (!$sections) {
      $carry[] = $scheme->label();
    }
    $forbidden->addCacheableDependency($scheme);
    return $carry;
  }, []);
  if ($invalid_schemes) {
    return $forbidden->setReason(sprintf('User has no active sections for the following access scheme(s): %s', implode(', ', $invalid_schemes)));
  }
  return $return;
}

/**
 * Implements hook_views_data_alter().
 */
function workbench_access_views_data_alter(array &$data) {
  $scheme_storage = \Drupal::entityTypeManager()->getStorage('access_scheme');
  if ($schemes = $scheme_storage->loadMultiple()) {
    /** @var \Drupal\workbench_access\Entity\AccessSchemeInterface $scheme */
    foreach ($schemes as $id => $scheme) {
      $scheme->getAccessScheme()->viewsData($data, $scheme);
      $data['users']['workbench_access_section__' . $scheme->id()] = [
        'title' => t('Workbench Section: @name', [
          '@name' => $scheme->label(),
        ]),
        'help' => t('The sections to which this user belongs for the @name scheme.', [
          '@name' => $scheme->label(),
        ]),
        'field' => [
          'id' => 'workbench_access_user_section',
          'scheme' => $scheme->id(),
        ],
        'filter' => [
          'field' => 'uid',
          'scheme' => $scheme->id(),
          'id' => 'workbench_access_section',
        ],
      ];
    }
  }
  // Legacy support.
  // @todo Remove in 8.x-2.x.
  if ($default = \Drupal::state()->get('workbench_access_upgraded_scheme_id')) {
    $scheme = $scheme_storage->load($default);
    $data['users']['workbench_access_section'] = [
      'title' => t('Workbench Section: @name (legacy)', [
        '@name' => $scheme->label(),
      ]),
      'help' => t('The sections to which this user belongs for the @name scheme.', [
        '@name' => $scheme->label(),
      ]),
      'field' => [
        'id' => 'workbench_access_user_section',
        'scheme' => $scheme->id(),
      ],
      'filter' => [
        'field' => 'uid',
        'scheme' => $scheme->id(),
        'id' => 'workbench_access_section',
      ],
    ];
    if (isset($data['node']['workbench_access_section__default'])) {
      $data['node']['workbench_access_section'] = $data['node']['workbench_access_section__default'];
      $data['node']['workbench_access_section']['title'] = t('Workbench Section: @name (legacy)', [
        '@name' => $scheme->label(),
      ]);
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function workbench_access_element_info_alter(array &$info) {
  if (isset($info['inline_entity_form'])) {
    $info['inline_entity_form']['#process'][] = 'workbench_access_process_inline_entity_form';
  }
}

/**
 * Process callback.
 */
function workbench_access_process_inline_entity_form(array &$element, FormStateInterface $form_state, &$complete_form) {
  $entity = $element['#entity'];
  if (!$entity instanceof ContentEntityInterface) {
    return $element;
  }
  return \Drupal::classResolver()->getInstanceFromDefinition(FormAlterHelper::class)->alterForm($element, $complete_form, $entity);
}
