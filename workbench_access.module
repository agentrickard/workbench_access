<?php

/**
 * @file
 * Contains workbench_access.module.
 */

use Drupal\node\NodeTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\workbench_access\WorkbenchAccessManagerInterface;

/**
 * Defines the name of the node access control field.
 *
 * @deprecated to be removed before 8.x.1.0 - use
 *   \Drupal\workbench_access\WorkbenchAccessManagerInterface::FIELD_NAME
 *   instead.
 */
define('WORKBENCH_ACCESS_FIELD', 'field_workbench_access');

/**
 * Implements hook_help().
 */
function workbench_access_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the workbench_access module.
    case 'help.page.workbench_access':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Hierarchical access control module.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Restricts selection options for the node form.
 */
function workbench_access_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $manager = \Drupal::getContainer()->get('plugin.manager.workbench_access.scheme');
  if ($scheme = $manager->getActiveScheme()) {
    $node = $form_state->getFormObject()->getEntity();

    // If no access field is set, we do nothing.
    $field = $scheme->fields('node', $node->bundle());
    if (empty($field)) {
      return;
    }
    // Load field data that can be edited.
    $account = \Drupal::currentUser();
    // If the user cannot access the form element or is a superuser, ignore.
    if (!empty($form[$field]['#access']) && !$account->hasPermission('bypass workbench access')) {
      $form[$field] = $scheme->alterOptions($form[$field], $manager);
      // Add the options hidden from the user silently to the form.
      $options_diff = $scheme->disallowedOptions($form[$field]);
      if (!empty($options_diff)) {
        // @TODO: Potentially show this information to users with permission.
        $form['workbench_access_disallowed'] = workbench_access_hidden_field($options_diff, $scheme);
        // Call our submitEntity() method to merge in values.
        $class = '\\' . get_class($scheme) . '::submitEntity';
        // Account for all the submit buttons on the node form.
        $buttons = ['submit', 'publish', 'unpublish'];
        foreach ($buttons as $button) {
          if (isset($form['actions'][$button]['#submit'])) {
            array_unshift($form['actions'][$button]['#submit'], $class);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds Workbench Access options to the node type form.
 *
 * @see NodeTypeForm::form().
 * @see menu_ui_form_node_type_form_builder().
 */
function workbench_access_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  // Add a checkbox to registration form about agreeing to terms of use.
  $type = $form_state->getFormObject()->getEntity();
  $form['workflow']['workbench_access_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Workbench Access control for @type content.', array('@type' => $type->label())),
    '#description' => t('If selected, all @type content will be subject to editorial access restrictions.', array('@type' => $type->label())),
    '#default_value' => $type->getThirdPartySetting('workbench_access', 'workbench_access_status', 0),
    '#access' => \Drupal::currentUser()->hasPermission('administer workbench access'),
  );
  $form['#entity_builders'][] = 'workbench_access_form_node_type_form_builder';
 }

/**
 * Entity builder for the node type form with Workbench Access options.
 *
 * @see workbench_access_form_node_type_form_alter().
 */
function workbench_access_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('workbench_access', 'workbench_access_status', $form_state->getValue('workbench_access_status'));
}

/**
 * Creates our fields for an entity bundle.
 *
 * @param $entity_type
 *   The entity type being created. Users are supported.
 * @param $bundle
 *   The bundle being created.
 */
function workbench_access_confirm_fields($entity_type, $bundle) {
  // We have reports that importing config causes this function to fail.
  try {
    $text = [
      'user' => [
        'type' => 'user',
        'label' => 'Sections', // @TODO tie to config
        'description' => 'Assign the editorial sections that this user belongs to.',
      ],
      'node' => [
        'type' => $bundle,
        'label' => 'Sections', // @TODO tie to config
        'description' => 'The editorial section for this content.',
      ]
    ];
    $id = $entity_type . '.' . $bundle . '.' . WorkbenchAccessManagerInterface::FIELD_NAME;

    if (!$field = \Drupal::entityManager()->getStorage('field_config')->load($id)) {
      $field = array(
        'field_name' => WorkbenchAccessManagerInterface::FIELD_NAME,
        'entity_type' => $entity_type,
        'label' => $text[$entity_type]['label'],
        'bundle' => $bundle,
        'required' => FALSE,
        'description' => $text[$entity_type]['description'],
        'default_value_callback' => 'Drupal\workbench_access\WorkbenchAccessManager::getDefaultValue',
      );
      if ($entity_type == 'node') {
        $field['settings']['handler_settings']['target_bundles'] = ['workbench_access' => 'workbench_access'];
        $field['settings']['handler_settings']['auto_create'] = FALSE;
        $field['settings']['handler_settings']['sort'] = ['field' => '_none'];
      }
      $field_config = \Drupal::entityManager()->getStorage('field_config')->create($field);
      $field_config->save();
    }
    // Installing without setting form display leaves the field hidden, which is
    // what we want right now. @TODO: UI for user form.
  }
  catch (Exception $e) {
    \Drupal::logger('workbench_access')->notice('Field installation failed.');
  }
}

/**
 * Implements hook_node_access().
 */
function workbench_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Check that our access control is configured.
  $manager = \Drupal::service('plugin.manager.workbench_access.scheme');
  if ($scheme = $manager->getActiveScheme()) {
    return $scheme->checkEntityAccess($node, $op, $account, $manager);
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function workbench_access_views_data_alter(array &$data) {
  $manager = \Drupal::getContainer()->get('plugin.manager.workbench_access.scheme');
  if ($scheme = $manager->getActiveScheme()) {
    $data['node']['workbench_access_section'] = array(
      'title' => t('Workbench Section'),
      'help' => t('The sections to which this content belongs.'),
      'field' => array(
        'id' => 'workbench_access_section',
      ),
      'filter' => array(
        'field' => 'nid',
        'id' => 'workbench_access_section',
      ),
    );
    $data['users']['workbench_access_section'] = array(
      'title' => t('Workbench Section'),
      'help' => t('The sections to which this user belongs.'),
      'field' => array(
        'id' => 'workbench_access_user_section',
      ),
      'filter' => array(
        'field' => 'uid',
        'id' => 'workbench_access_section',
      ),
    );
  }
}

/**
 * Adds a hidden field that stored access information that cannot be edited.
 *
 * @param array $options_diff
 *   An array of section ids that cannot be edited by the current user.
 * @param Drupal\workbench_access\Annotation\AccessControlHierarchy $scheme
 *   The active access control scheme.
 *
 * @return array
 *   A form element.
 */
function workbench_access_hidden_field($options_diff, $scheme) {
  $element = array(
    '#type' => 'value',
    '#value' => $options_diff,
  );
  return $element;
}
